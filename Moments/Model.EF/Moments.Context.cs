//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moments.Model.EF
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MomentsEntities : DbContext
    {
        public MomentsEntities()
            : base("name=MomentsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Lookup> Lookups { get; set; }
        public virtual DbSet<PromotionEmail> PromotionEmails { get; set; }
        public virtual DbSet<Story> Stories { get; set; }
        public virtual DbSet<StoriesNode> StoriesNodes { get; set; }
        public virtual DbSet<UserProfile> UserProfiles { get; set; }
        public virtual DbSet<UserRegistration> UserRegistrations { get; set; }
        public virtual DbSet<Node> Nodes { get; set; }
    
        public virtual ObjectResult<sp_GetAllUsers_Result> sp_GetAllUsers(string type, Nullable<bool> isactive, Nullable<bool> isblocked, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<bool> isfeatured)
        {
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var isactiveParameter = isactive.HasValue ?
                new ObjectParameter("isactive", isactive) :
                new ObjectParameter("isactive", typeof(bool));
    
            var isblockedParameter = isblocked.HasValue ?
                new ObjectParameter("isblocked", isblocked) :
                new ObjectParameter("isblocked", typeof(bool));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var isfeaturedParameter = isfeatured.HasValue ?
                new ObjectParameter("isfeatured", isfeatured) :
                new ObjectParameter("isfeatured", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllUsers_Result>("sp_GetAllUsers", typeParameter, isactiveParameter, isblockedParameter, startdateParameter, enddateParameter, isfeaturedParameter);
        }
    
        public virtual ObjectResult<sp_UserLogin_Result> sp_UserLogin(string email, string password, string type)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UserLogin_Result>("sp_UserLogin", emailParameter, passwordParameter, typeParameter);
        }
    
        public virtual ObjectResult<sp_GetUserProfileAndUserRegistrationRecord_Result> sp_GetUserProfileAndUserRegistrationRecord(Nullable<int> userProfileId)
        {
            var userProfileIdParameter = userProfileId.HasValue ?
                new ObjectParameter("UserProfileId", userProfileId) :
                new ObjectParameter("UserProfileId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUserProfileAndUserRegistrationRecord_Result>("sp_GetUserProfileAndUserRegistrationRecord", userProfileIdParameter);
        }
    
        public virtual ObjectResult<sp_GetLookupsByLookupsType_Result> sp_GetLookupsByLookupsType(Nullable<bool> isActive, string lookuptype)
        {
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lookuptypeParameter = lookuptype != null ?
                new ObjectParameter("lookuptype", lookuptype) :
                new ObjectParameter("lookuptype", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLookupsByLookupsType_Result>("sp_GetLookupsByLookupsType", isActiveParameter, lookuptypeParameter);
        }
    
        public virtual ObjectResult<Sp_GetStories_Result> Sp_GetStories(Nullable<bool> isFeatured, Nullable<int> status, Nullable<int> categoryId, Nullable<int> userId, Nullable<int> storyId)
        {
            var isFeaturedParameter = isFeatured.HasValue ?
                new ObjectParameter("IsFeatured", isFeatured) :
                new ObjectParameter("IsFeatured", typeof(bool));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var storyIdParameter = storyId.HasValue ?
                new ObjectParameter("StoryId", storyId) :
                new ObjectParameter("StoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetStories_Result>("Sp_GetStories", isFeaturedParameter, statusParameter, categoryIdParameter, userIdParameter, storyIdParameter);
        }
    }
}
